name: Build and Publish Ansible Collection

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  COLLECTION_NAMESPACE: kush_gupt
  COLLECTION_NAME: ed_25_03
  COLLECTION_PATH: ansible/ansible_collections/cisa/ed_25_03

jobs:
  lint-and-test:
    name: Lint and Test Collection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.14
          pip install ansible-lint
          pip install yamllint

      - name: Install collection dependencies
        run: |
          ansible-galaxy collection install -r ansible/requirements.yml --force
        continue-on-error: true

      - name: Run ansible-lint
        run: |
          cd ansible
          ansible-lint --config-file .ansible-lint
        continue-on-error: true

      - name: Run yamllint on collection
        run: |
          yamllint ${{ env.COLLECTION_PATH }}
        continue-on-error: true

      - name: Validate galaxy.yml
        run: |
          python -c "
          import yaml
          import sys
          try:
              with open('${{ env.COLLECTION_PATH }}/galaxy.yml', 'r') as f:
                  data = yaml.safe_load(f)
              required_fields = ['namespace', 'name', 'version', 'description', 'authors']
              for field in required_fields:
                  if field not in data or not data[field]:
                      print(f'Missing or empty required field: {field}')
                      sys.exit(1)
              print('galaxy.yml validation passed')
          except Exception as e:
              print(f'galaxy.yml validation failed: {e}')
              sys.exit(1)
          "

  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    outputs:
      collection-version: ${{ steps.build.outputs.version }}
      artifact-path: ${{ steps.build.outputs.artifact }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.14

      - name: Extract version from galaxy.yml
        id: version
        run: |
          VERSION=$(python -c "
          import yaml
          with open('${{ env.COLLECTION_PATH }}/galaxy.yml', 'r') as f:
              data = yaml.safe_load(f)
          print(data['version'])
          ")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Collection version: $VERSION"

      - name: Build collection
        id: build
        run: |
          cd ${{ env.COLLECTION_PATH }}
          ansible-galaxy collection build --output-path ../../../build/
          ARTIFACT_NAME="${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-${{ steps.version.outputs.version }}.tar.gz"
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "artifact=build/$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "Built collection: $ARTIFACT_NAME"
          ls -la ../../../build/

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ansible-collection
          path: build/*.tar.gz
          retention-days: 30

  publish-galaxy:
    name: Publish to Ansible Galaxy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core>=2.14

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ansible-collection
          path: build/

      - name: List artifacts
        run: |
          echo "Available artifacts:"
          ls -la build/

      - name: Publish to Ansible Galaxy
        env:
          ANSIBLE_GALAXY_API_KEY: ${{ secrets.ANSIBLE_GALAXY_API_KEY }}
        run: |
          if [ -z "$ANSIBLE_GALAXY_API_KEY" ]; then
            echo "ERROR: ANSIBLE_GALAXY_API_KEY secret is not set"
            echo "Please add your Ansible Galaxy API key as a repository secret"
            exit 1
          fi
          
          COLLECTION_FILE=$(ls build/*.tar.gz | head -1)
          echo "Publishing collection: $COLLECTION_FILE"
          
          ansible-galaxy collection publish "$COLLECTION_FILE" \
            --api-key "$ANSIBLE_GALAXY_API_KEY" \
            --wait

      - name: Verify publication
        run: |
          echo "Collection published successfully!"
          echo "You can view it at: https://galaxy.ansible.com/${{ env.COLLECTION_NAMESPACE }}/${{ env.COLLECTION_NAME }}"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-galaxy]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: ansible-collection
          path: build/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/*.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
