name: Build and Push Ansible Execution Environment

on:
  push:
    branches:
      - main
      - playbook-nest
    paths:
      - 'execution-environment.yml'
      - 'requirements.yml'
      - 'requirements.txt'
      - 'bindep.txt'
      - '.github/workflows/build-execution-environment.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'execution-environment.yml'
      - 'requirements.yml'
      - 'requirements.txt'
      - 'bindep.txt'
      - '.github/workflows/build-execution-environment.yml'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push image to GHCR (main branch only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/ansible-ee
  COLLECTION_NAMESPACE: kush_gupt
  COLLECTION_NAME: ed_25_03

jobs:
  build-execution-environment:
    name: Build Ansible Execution Environment
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ansible-builder
        run: |
          python -m pip install --upgrade pip
          pip install ansible-builder>=3.0.0

      - name: Prepare build context
        run: |
          # Copy the ansible requirements to root for EE build
          cp ansible/requirements.yml ./
          
          # Verify all required files exist
          echo "=== Checking build files ==="
          ls -la
          
          # Show what we're building with
          echo "=== Execution Environment Configuration ==="
          cat execution-environment.yml
          echo
          echo "=== Collection Requirements ==="
          cat requirements.yml
          echo
          echo "=== Python Requirements ==="
          cat requirements.txt
          echo
          echo "=== System Dependencies ==="
          cat bindep.txt

      - name: Log in to Container Registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/playbook-nest') || (github.event_name == 'workflow_dispatch' && inputs.push_to_registry)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=CISA ED 25-03 Ansible Execution Environment
            org.opencontainers.image.description=Ansible execution environment for CISA ED 25-03 Core Dump & Hunt automation (Cisco ASA)
            org.opencontainers.image.vendor=CISA ED 25-03 Project
            org.opencontainers.image.licenses=Apache-2.0

      - name: Build execution environment
        id: build
        run: |
          # Build the execution environment
          ansible-builder build \
            --file execution-environment.yml \
            --tag temp-ee:latest \
            --verbosity 2
          
          # Get the image ID
          IMAGE_ID=$(docker images temp-ee:latest --format "{{.ID}}")
          echo "Built image ID: $IMAGE_ID"
          
          # Tag with all metadata tags
          TAGS="${{ steps.meta.outputs.tags }}"
          for tag in $TAGS; do
            echo "Tagging with: $tag"
            docker tag temp-ee:latest "$tag"
          done
          
          # Set output for digest (will be available after push)
          echo "digest=sha256:$(docker inspect temp-ee:latest --format='{{.Id}}' | cut -d: -f2)" >> $GITHUB_OUTPUT

      - name: Test execution environment
        run: |
          echo "=== Testing Execution Environment ==="
          
          # Test that ansible is available and working
          docker run --rm temp-ee:latest ansible --version
          
          # Test that required collections are installed
          echo "=== Installed Collections ==="
          docker run --rm temp-ee:latest ansible-galaxy collection list
          
          # Test that cisco.asa collection is available
          echo "=== Testing cisco.asa collection ==="
          docker run --rm temp-ee:latest ansible-doc cisco.asa.asa_command || echo "cisco.asa.asa_command documentation not found, but collection may still be functional"
          
          # Test that ansible.netcommon collection is available
          echo "=== Testing ansible.netcommon collection ==="
          docker run --rm temp-ee:latest ansible-doc ansible.netcommon.network_cli || echo "ansible.netcommon.network_cli documentation not found, but collection may still be functional"

      - name: Push to registry
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/playbook-nest') || (github.event_name == 'workflow_dispatch' && inputs.push_to_registry)
        run: |
          echo "=== Pushing to Container Registry ==="
          TAGS="${{ steps.meta.outputs.tags }}"
          for tag in $TAGS; do
            echo "Pushing: $tag"
            docker push "$tag"
          done

      - name: Generate artifact attestation
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/playbook-nest') || (github.event_name == 'workflow_dispatch' && inputs.push_to_registry)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-execution-environment
    if: always() && needs.build-execution-environment.result == 'success'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ansible-builder
        run: |
          python -m pip install --upgrade pip
          pip install ansible-builder>=3.0.0

      - name: Prepare build context
        run: |
          # Copy the ansible requirements to root for EE build
          cp ansible/requirements.yml ./

      - name: Build execution environment for scanning
        run: |
          ansible-builder build \
            --file execution-environment.yml \
            --tag scan-ee:latest \
            --verbosity 1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-ee:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
